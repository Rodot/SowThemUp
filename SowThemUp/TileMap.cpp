#include "TileMap.h"

#include <Gamebuino-Meta.h>
#include "Engine.h"

const uint16_t wall_data[] = {
  8,      // frame width
  8,      // frame height
  1,      // number of frames
  0,      // animation speed
  0xf81f, // transparent color
  0,      // RGB565 color mode
  // frame 1/1
  0x0000, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x0000,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268,
  0x0000, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x5268, 0x0000
};

Image wall_image(wall_data);

const uint16_t tree_data[] = {
  8,      // frame width
  8,      // frame height
  1,      // number of frames
  0,      // animation speed
  0xf81f, // transparent color
  0,      // RGB565 color mode
  // frame 1/1
  0x0000, 0x0000, 0x044a, 0x044a, 0x044a, 0x044a, 0x0000, 0x0000,
  0x0000, 0x044a, 0x044a, 0x8668, 0x044a, 0x044a, 0x044a, 0x0000,
  0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a,
  0x044a, 0x8668, 0x044a, 0x044a, 0x8668, 0x044a, 0x044a, 0x044a,
  0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a,
  0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a,
  0x0000, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x044a, 0x0000,
  0x0000, 0x0000, 0x044a, 0x044a, 0x044a, 0x044a, 0x0000, 0x0000
};

Image tree_image(tree_data);

const uint16_t fire_data[] = {
  8,      // frame width
  8,      // frame height
  8,      // number of frames
  2,      // animation speed
  0xf81f, // transparent color
  0,      // RGB565 color mode
  // frame 1/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 2/8
  0x0000, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 3/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0x0000, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 4/8
  0x0000, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0x0000, 
  // frame 5/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0x0000, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 6/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 7/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  // frame 8/8
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 
  0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 
  0x0000, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x0000
};

Image fire_image(fire_data);

TileMap::TileMap() {
}

void TileMap::load(const uint8_t* d) {
  memcpy(data, d, widthTiles * heightTiles);
  //Spawn enemies
  for (int i = 0; i < widthTiles; i++) {
    for (int j = 0; j < heightTiles; j++) {
      int tile = data[i + (j * widthTiles)];
      if (tile == 4) {
        //create the enemy
        Engine::addObject(new Enemy(i * tileSize, j * tileSize));
        //remove the tile
        data[i + (j * widthTiles)] = 0;
      }
    }
  }
}

void TileMap::draw() {
  for (int i = 0; i < widthTiles; i++) {
    for (int j = 0; j < heightTiles; j++) {
      int tile = data[i + (j * widthTiles)];
      if (tile > 0) {
        //if (tile == 1) gb.display.setColor(BROWN);
        //if (tile == 2) gb.display.setColor(GREEN);
        //if (tile == 3) gb.display.setColor(RED);
        //gb.display.drawRect(i * tileSize - (int)Engine::cameraX, j * tileSize - (int)Engine::cameraY, tileSize, tileSize);
        if (tile == 1) gb.display.drawImage(i * tileSize - (int)Engine::cameraX, j * tileSize - (int)Engine::cameraY, wall_image);
        if (tile == 2) gb.display.drawImage(i * tileSize - (int)Engine::cameraX, j * tileSize - (int)Engine::cameraY, tree_image);
        if (tile == 3) gb.display.drawImage(i * tileSize - (int)Engine::cameraX, j * tileSize - (int)Engine::cameraY, fire_image);
      }
    }
  }
}

int TileMap::getTile(int x, int y) {
  int i = x / tileSize;
  int j = y / tileSize;
  if ((i < 0) || (i > widthTiles) || (j < 0) || (j > heightTiles)) {
    return -1;
  }
  return data[i + (j * widthTiles)];
}

void TileMap::setTile(int x, int y, int t) {
  int i = x / tileSize;
  int j = y / tileSize;
  if ((i < 0) || (i > widthTiles) || (j < 0) || (j > heightTiles)) {
    return;
  }
  data[i + (j * widthTiles)] = t;
}

int TileMap::getTreeCount() {
  int treeCount = 0;
  for (int i = 0; i < widthTiles; i++) {
    for (int j = 0; j < heightTiles; j++) {
      int tile = data[i + (j * widthTiles)];
      if (tile == 2) {
        treeCount++;
      }
    }
  }
  return treeCount;
}
